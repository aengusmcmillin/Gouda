using namespace metal;

struct VertexOut {
    float4 position [[position]];
    float2 texCoord;
};

float square(float val)
{
    return val * val;
}


float calc_rounded_corners(float2 coord, float radius, float width, float height)
{
    if (radius <= 0.0) {
        return 1.0;
    }
    float cornerSmooth = 0.002;

    float2 pixelPos = coord * float2(width, height);
    float2 minCorner = float2(radius, radius);
    float2 maxCorner = float2(width - radius, height - radius);

    float2 cornerPoint = clamp(pixelPos, minCorner, maxCorner);
    float lowerBound = square(radius - cornerSmooth);
    float upperBound = square(radius + cornerSmooth);
    return smoothstep(upperBound, lowerBound, distance_squared(pixelPos, cornerPoint));
}

fragment float4 fragment_main(VertexOut interpolated [[stage_in]], constant float4 &color [[buffer(0)]], constant float2 &dimensions [[buffer(1)]], constant float &radius [[buffer(2)]])
{
    float alpha = calc_rounded_corners(interpolated.texCoord, radius, dimensions.x, dimensions.y);
    return float4(color[0], color[1], color[2], alpha);
}
